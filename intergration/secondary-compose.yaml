# secondary-compose.yaml

services:
  postgres-secondary:
    image: pgvector/pgvector:pg17
    container_name: postgres-secondary
    depends_on:
      - rabbitmq2 # RabbitMQ 클러스터 구성을 위해 먼저 실행
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PRIMARY_SERVER_IP=${PRIMARY_SERVER_IP}
      - PGDATA=/var/lib/postgresql/data/pgdata # entrypoint 스크립트에서 사용
    volumes:
      - postgres-data-secondary:/var/lib/postgresql/data
      - ./postgres/entrypoint-replica.sh:/usr/local/bin/entrypoint-replica.sh
    entrypoint: /usr/local/bin/entrypoint-replica.sh
    restart: always

  infisical-secondary:
    image: infisical/infisical:latest
    container_name: infisical-secondary
    ports:
      - "8080:3000"
    env_file:
      - ./.env
    environment:
      # 평상시에는 Primary DB를 바라보고, Failover 시 Load Balancer/VIP가 트래픽을 이쪽으로 보냄
      - DB_CONNECTION_URI=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${PRIMARY_SERVER_IP}:5432/${DB_INFISICAL}
    restart: always

  rabbitmq2:
    image: rabbitmq:4.1.2-management
    container_name: rabbitmq2
    hostname: rabbit2
    depends_on:
      - redis-replica # 순서 보장을 위해 추가
    ports:
      - "15672:15672"   # Management UI
      - "5672:5672"     # AMQP
      - "25672:25672"   # Erlang Distribution Port
      - "4369:4369"     # Erlang Port Mapper Daemon
      - "15692:15692"   # Prometheus Metrics
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=your_strong_rabbit_password
      - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
      - RABBITMQ_NODENAME=rabbit@rabbitmq2
    volumes:
      - rabbitmq-data-secondary:/var/lib/rabbitmq
      - ./rabbitmq/entrypoint-cluster.sh:/usr/local/bin/entrypoint-cluster.sh
    entrypoint: /usr/local/bin/entrypoint-cluster.sh
    restart: always

  redis-replica:
    image: redis:7.2-alpine
    container_name: redis-replica
    command: redis-server --replicaof ${PRIMARY_SERVER_IP} 6379
    volumes:
      - redis-replica-data:/data
    restart: always

  redis-sentinel2:
    image: redis:7.2-alpine
    container_name: redis-sentinel2
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    ports:
      - "26379:26379"
    volumes:
      - ./redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf
    restart: always

  prometheus2:
    image: prom/prometheus:v2.53.0
    container_name: prometheus2
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data2:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: always

  grafana2:
    image: grafana/grafana:11.1.0
    container_name: grafana2
    ports:
      - "3000:3000"
    volumes:
      - grafana_data2:/var/lib/grafana
    restart: always

  influxdb2:
    image: influxdb:2.7.7
    container_name: influxdb2
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data2:/var/lib/influxdb2
    restart: always

volumes:
  postgres-data-secondary:
  rabbitmq-data-secondary:
  redis-replica-data:
  prometheus_data2:
  grafana_data2:
  influxdb_data2:
